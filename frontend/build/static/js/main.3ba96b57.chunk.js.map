{"version":3,"sources":["components/Signup.js","App.js","serviceWorker.js","index.js"],"names":["Signup","useState","name","setName","username","setUsername","email","setEmail","password","setPassword","cpassword","setCpassword","firstRender","useRef","disable","setDisable","error","setError","useEffect","current","inputValidation","submitForm","e","a","preventDefault","fetch","method","headers","body","JSON","stringify","verified","token","recieveEmail","response","console","log","window","location","message","className","onSubmit","type","value","onChange","target","placeholder","disabled","App","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"sOA0GeA,EAxGA,WAAO,IAAD,EACIC,mBAAS,IADb,mBACbC,EADa,KACPC,EADO,OAEYF,mBAAS,IAFrB,mBAEbG,EAFa,KAEHC,EAFG,OAGMJ,mBAAS,IAHf,mBAGbK,EAHa,KAGNC,EAHM,OAIYN,mBAAS,IAJrB,mBAIbO,EAJa,KAIHC,EAJG,OAKcR,mBAAS,IALvB,mBAKbS,EALa,KAKFC,EALE,KAUdC,EAAcC,kBAAO,GAVP,EAWUZ,oBAAS,GAXnB,mBAWba,EAXa,KAWJC,EAXI,OAYMd,mBAAS,IAZf,mBAYbe,EAZa,KAYNC,EAZM,KAcpBC,qBAAU,WACLN,EAAYO,QACfP,EAAYO,SAAU,EAGvBJ,EAAWK,OACT,CAAClB,IAEJ,IAAMkB,EAAkB,WACvB,MAAa,KAATlB,GACHe,EAAS,6BACF,IAEPA,EAAS,OACF,IAIHI,EAAU,uCAAG,WAAMC,GAAN,eAAAC,EAAA,6DAClBD,EAAEE,iBADgB,kBAGMC,MAAM,+BAAgC,CAC5DC,OAAQ,OACRC,QAAS,CAAC,eAAgB,oBAC1BC,KAAMC,KAAKC,UAAU,CAAC5B,OAAME,WAAUE,QAAOE,WAAUuB,SAhCzC,EAgCmDC,MA/BtD,qBA+B6DC,aA9BtD,MAwBF,OAGXC,EAHW,OAQjBC,QAAQC,IAAIF,GACZG,OAAOC,SAAW,IATD,gDAWjBH,QAAQnB,MAAM,KAAIuB,SAXD,yDAAH,sDAchB,OACC,kBAAC,WAAD,KACC,wBAAIC,UAAU,oBAAd,eACA,yBAAKA,UAAU,iDACd,0BAAMA,UAAU,uDAAuDC,SAAUpB,GAChF,yBAAKmB,UAAU,cACd,2BAAOA,UAAU,eAChBE,KAAK,OACLxC,KAAK,OACLyC,MAAOzC,EACP0C,SAAU,SAAAtB,GAAC,OAAInB,EAAQmB,EAAEuB,OAAOF,QAChCG,YAAY,cAEZ9B,GAEF,yBAAKwB,UAAU,mBACd,2BAAOA,UAAU,eAChBE,KAAK,OACLxC,KAAK,WACLyC,MAAOvC,EACPwC,SAAU,SAAAtB,GAAC,OAAIjB,EAAYiB,EAAEuB,OAAOF,QACpCG,YAAY,cAGd,yBAAKN,UAAU,mBACd,2BAAOA,UAAU,eAChBE,KAAK,OACLxC,KAAK,QACLyC,MAAOrC,EACPsC,SAAU,SAAAtB,GAAC,OAAIf,EAASe,EAAEuB,OAAOF,QACjCG,YAAY,WAGd,yBAAKN,UAAU,mBACd,2BAAOA,UAAU,eAChBE,KAAK,WACLxC,KAAK,WACLyC,MAAOnC,EACPoC,SAAU,SAAAtB,GAAC,OAAIb,EAAYa,EAAEuB,OAAOF,QACpCG,YAAY,cAGd,yBAAKN,UAAU,mBACd,2BAAOA,UAAU,eAChBE,KAAK,WACLxC,KAAK,YACLyC,MAAOjC,EACPkC,SAAU,SAAAtB,GAAC,OAAIX,EAAaW,EAAEuB,OAAOF,QACrCG,YAAY,sBAGd,4BAAQN,UAAU,uBAAuBO,SAAUjC,EAAS4B,KAAK,UAAjE,gBCnFUM,MAVf,WACE,OACE,kBAAC,WAAD,KACE,6BACE,kBAAC,EAAD,SCEYC,QACW,cAA7BZ,OAAOC,SAASY,UAEe,UAA7Bb,OAAOC,SAASY,UAEhBb,OAAOC,SAASY,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAA/C,GACLmB,QAAQnB,MAAMA,EAAMuB,a","file":"static/js/main.3ba96b57.chunk.js","sourcesContent":["import React, { Fragment, useState, useRef, useEffect } from \"react\";\n\nconst Signup = () => {\n\tconst [name, setName] = useState(\"\");\n\tconst [username, setUsername] = useState(\"\");\n\tconst [email, setEmail] = useState(\"\");\n\tconst [password, setPassword] = useState(\"\");\n\tconst [cpassword, setCpassword] = useState(\"\");\n\tconst verified = 0;\n\tconst token = \"newtoken08989today\"\n\tconst recieveEmail = 0\n\n\tconst firstRender = useRef(true);\n\tconst [disable, setDisable] = useState(true);\n\tconst [error, setError] = useState(\"\");\n\n\tuseEffect(() => {\n\t\tif (firstRender.current){\n\t\t\tfirstRender.current = false;\n\t\t\treturn\n\t\t}\n\t\tsetDisable(inputValidation());\n\t}, [name]) // eslint-disable-line react-hooks/exhaustive-deps\n\n\tconst inputValidation = () => {\n\t\tif (name === \"\"){\n\t\t\tsetError(\"Name field cant be empty\")\n\t\t\treturn true\n\t\t}else {\n\t\t\tsetError(null);\n\t\t\treturn false;\n\t\t}\n\t}\n\n\tconst submitForm = async e => {\n\t\te.preventDefault();\n\t\ttry {\n\t\t\tconst response = await fetch(\"http://localhost:5000/signup\", {\n\t\t\t\tmethod: \"POST\",\n\t\t\t\theaders: {\"content-type\": \"application/json\"},\n\t\t\t\tbody: JSON.stringify({name, username, email, password, verified, token, recieveEmail})\n\t\t\t})\n\t\t\tconsole.log(response);\n\t\t\twindow.location = \"/\";\n\t\t}catch(err){\n\t\t\tconsole.error(err.message);\n\t\t}\n\t}\n\treturn (\n\t\t<Fragment>\n\t\t\t<h2 className=\"text-center mt-3\">Signup Form</h2>\n\t\t\t<div className=\"row justify-content-center align-items-center\">\n\t\t\t\t<form className=\"text-center mt-3 col-md-6 col-sm-6 col-lg-4 col-xs-8\" onSubmit={submitForm}>\n\t\t\t\t\t<div className=\"form-group\">\n\t\t\t\t\t\t<input className=\"form-control\"\n\t\t\t\t\t\t\ttype=\"text\" \n\t\t\t\t\t\t\tname=\"name\"\n\t\t\t\t\t\t\tvalue={name}\n\t\t\t\t\t\t\tonChange={e => setName(e.target.value)} \n\t\t\t\t\t\t\tplaceholder=\"Full Name\" \n\t\t\t\t\t\t/>\n\t\t\t\t\t\t{error}\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className=\"form-group mt-3\">\n\t\t\t\t\t\t<input className=\"form-control\"\n\t\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\t\tname=\"username\" \n\t\t\t\t\t\t\tvalue={username}\n\t\t\t\t\t\t\tonChange={e => setUsername(e.target.value)}\n\t\t\t\t\t\t\tplaceholder=\"Username\" \n\t\t\t\t\t\t/>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className=\"form-group mt-3\">\n\t\t\t\t\t\t<input className=\"form-control\"\n\t\t\t\t\t\t\ttype=\"text\" \n\t\t\t\t\t\t\tname=\"email\"\n\t\t\t\t\t\t\tvalue={email}\n\t\t\t\t\t\t\tonChange={e => setEmail(e.target.value)}\n\t\t\t\t\t\t\tplaceholder=\"Email\"\n\t\t\t\t\t\t/>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className=\"form-group mt-3\">\n\t\t\t\t\t\t<input className=\"form-control\"\n\t\t\t\t\t\t\ttype=\"password\"\n\t\t\t\t\t\t\tname=\"password\"\n\t\t\t\t\t\t\tvalue={password}\n\t\t\t\t\t\t\tonChange={e => setPassword(e.target.value)}\n\t\t\t\t\t\t\tplaceholder=\"Password\"\n\t\t\t\t\t\t/>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className=\"form-group mt-3\">\n\t\t\t\t\t\t<input className=\"form-control\"\n\t\t\t\t\t\t\ttype=\"password\"\n\t\t\t\t\t\t\tname=\"cpassword\"\n\t\t\t\t\t\t\tvalue={cpassword}\n\t\t\t\t\t\t\tonChange={e => setCpassword(e.target.value)}\n\t\t\t\t\t\t\tplaceholder=\"Confirm password\"\n\t\t\t\t\t\t/>\n\t\t\t\t\t</div>\n\t\t\t\t\t<button className=\"btn btn-success mt-3\" disabled={disable} type=\"submit\">Register</button>\n\t\t\t\t</form>\n\t\t\t</div>\n\t\t</Fragment>\n\t)\n}\n\nexport default Signup;","import React, { Fragment } from 'react';\nimport './App.css';\n\n//components\nimport Signup from './components/Signup';\n\nfunction App() {\n  return (\n    <Fragment>\n      <div>\n        <Signup />\n      </div>\n    </Fragment>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}